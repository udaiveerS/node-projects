#!/bin/sh

fileName="$1" 

#if 2 arguments provided then create .txt file with input 
if [ "$#" -eq 2 ]; then
    input=$2
    echo "creating ${fileName}.txt"
    echo $input > "${fileName}.txt"
fi

SCRIPT_PATH="${BASH_SOURCE[0]}";
if ([ -h "${SCRIPT_PATH}" ]) then
      while([ -h "${SCRIPT_PATH}" ]) do SCRIPT_PATH=`readlink "${SCRIPT_PATH}"`; done
fi
pushd . > /dev/null
cd `dirname ${SCRIPT_PATH}` > /dev/null
SCRIPT_PATH=`pwd`;
SP="../test_script/"
popd  > /dev/null

echo "basename $SP"
fileTxt="${SP}${1}.txt"
fileJ="${SP}${1}.j"
logOut="${SP}${1}.out"
classFile="${SP}${1}.class"
jar1="${SP}TestScript.jar"
jar2="${SP}jasmin.jar"

echo "fileTxt = ${fileTxt}"
echo "fileJ = ${fileJ} "
echo "logOut = ${logOut}"


echo "trying to compile..."
(java -jar ${jar1} "$fileTxt" > "${logOut}") & pid=$!
( sleep 2 && kill -HUP $pid ) 2>/dev/null & watcher=$!
if wait $pid 2>/dev/null; then
    echo "your_command finished"
    pkill -HUP -P $watcher
    wait $watcher

    if [ -f $logOut ]
    then
        echo "compiler message"
        cat $logOut
    else
        echo "compiler message"
        echo "compiler Error could not parse program" >> ${logOut}
        cat $logOut
    fi
else
    echo "your_command interrupted"
    echo "compilation failed due to timeout" >> ${logOut}
    cat $logOut
fi

# compile the jasmine files 
echo "compiling jasmine file"
java -jar $jar2 $fileJ -d ${SP} 

if [ -f "$classFile" ]
    then
        echo "running the class file" >> ${logOut}
        echo '----------- Code Execution -----------' >> ${logOut}
        echo "running the class file" 
        (java $fileName) >> ${logOut}
        cat $logOut
    else
        echo "jasmin code generation error"
        echo "jasmin code generation error: .class file could not be generated" >> ${logOut}
        echo "terminating compilation..." >> ${logOut}
        cat $logOut
fi

